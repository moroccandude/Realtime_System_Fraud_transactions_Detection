version: '3.9'

services:
  hiveserver2:
   image: apache/hive:4.0.1
   depends_on:
     metastore:
       condition: service_started
   restart: unless-stopped
   container_name: hiveserver2
   hostname: hiveserver2
   environment:
     SERVICE_NAME: 'hiveserver2'
     HIVE_SERVER2_THRIFT_PORT: 10000
   ports:
     - '10000:10000'
   volumes:
     - ./warehouse:/opt/hive/data/warehouse
   networks:
     - data_network
  # Hive Metastore Database
  postgres_metastore_hive:
    image: postgres:13
    restart: unless-stopped
    container_name: postgres_metastore
    hostname: postgres
    environment:
      POSTGRES_DB: 'metastore_db'
      POSTGRES_USER: 'hive'
      POSTGRES_PASSWORD: 'password'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hive -d metastore_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - '5438:5432'
    volumes:
      - ./hive-db:/var/lib/postgresql/data
    networks:
      - data_network

  # Hive Metastore
  metastore:
    image: apache/hive:4.0.1
    depends_on:
      postgres_metastore_hive:
        condition: service_healthy
    restart: unless-stopped
    container_name: metastore
    hostname: metastore
    environment:
      DB_DRIVER: postgres
      SERVICE_NAME: 'metastore'
      HIVE_METASTORE_URI: thrift://metastore:9083
      SERVICE_OPTS: >
        -Xmx1G
        -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
        -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres:5432/metastore_db
        -Djavax.jdo.option.ConnectionUserName=hive
        -Djavax.jdo.option.ConnectionPassword=password
        
        -Ddatanucleus.autoCreateSchema=true
        -Dhive.metastore.schema.verification=false
        -Dhive.metastore.schema.verification.record.version=false
    ports:
      - '9083:9083'
    volumes:
      - ./warehouse:/opt/hive/data/warehouse
      - ./postgresql-42.6.0.jar:/opt/hive/lib/postgresql-42.6.0.jar
    networks:
      - data_network

  # Hadoop NameNode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    restart: unless-stopped
    ports:
      - "9870:9870"
      - "9001:9000"
    environment:
      - CLUSTER_NAME=hadoop-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9001
    volumes:
      - ./hadoop/hadoop_namenode:/hadoop/dfs/name
    healthcheck:
      test: ["CMD", "curl", "-f", "http://namenode:9870"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - data_network

  # Hadoop DataNode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    hostname: datanode
    restart: unless-stopped
    depends_on:
      - namenode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9001
    volumes:
      - ./hadoop/hadoop_datanode:/hadoop/dfs/data
    networks:
      - data_network

  # PostgreSQL for Airflow (serves as both metadata DB and results backend)
  postgres_airflow:
    image: postgres:13
    container_name: postgres_airflow
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5439:5432"
    volumes:
      - ./airflow/postgres_airflow_data:/var/lib/postgresql/data
    networks:
      - data_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  airflow-init:
    image: apache/airflow:2.7.1
    container_name: airflow-init
    depends_on:
      postgres_airflow:
        condition: service_healthy
    entrypoint: /bin/bash
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/airflow_files:/opt/airflow/files
    command: >
      -c "
      mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins /opt/airflow/files;
      chown -R 50000:0 /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins /opt/airflow/files;
      airflow db init;
      airflow users create --username airflow --password airflow --firstname Admin --lastname User --role Admin --email admin@example.com;
      "
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      - AIRFLOW__CORE__FERNET_KEY=''
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    networks:
      - data_network

  airflow-webserver:
    image: apache/airflow:2.7.1
    container_name: airflow_webserver
    restart: unless-stopped
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      - AIRFLOW__CORE__FERNET_KEY=''
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/airflow_files:/opt/airflow/files
    ports:
      - "8080:8080"
    command: airflow webserver
    networks:
      - data_network

  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: airflow-scheduler
    restart: unless-stopped
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      - AIRFLOW__CORE__FERNET_KEY=''
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/airflow_files:/opt/airflow/files
    command: airflow scheduler
    networks:
      - data_network

  zookeeper:
      image: wurstmeister/zookeeper
      container_name: zookeeper
      restart: always
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
      networks:
        - data_network
  kafka:
      image: wurstmeister/kafka:latest
      container_name: kafka
      depends_on:
        - zookeeper
      restart: always
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
        KAFKA_LISTENERS: INTERNAL://0.0.0.0:9094,EXTERNAL://0.0.0.0:29092
        KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9094,EXTERNAL://localhost:29092
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      ports:
        - "9094:9092"
        - "29092:29092"
      networks:
         - data_network
      entrypoint:
        - sh
        - -c
        - |
          # Wait for Zookeeper to be ready
          echo "Waiting for Zookeeper..."
          while ! nc -z zookeeper 2181; do
            sleep 1
          done

          # Start Kafka in the background
          echo "Starting Kafka..."
          /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties &

          # Wait for Kafka to be ready
          echo "Waiting for Kafka..."
          while ! nc -z localhost 9092; do
            sleep 1
          done

          # Extra safety delay
          sleep 5

          # Create the "transactions" topic

          echo "Creating topic..."
          /opt/kafka/bin/kafka-topics.sh --create \
            --topic transactions \
            --partitions 1 \
            --replication-factor 1 \
            --bootstrap-server localhost:9092

          # Keep the container alive
          tail -f /dev/null   
    
volumes:
  hive-db:
  warehouse:
  hadoop_namenode:
  hadoop_datanode:
  postgres_airflow_data:

networks:
  data_network:
    driver: bridge