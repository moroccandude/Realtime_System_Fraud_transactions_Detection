version: '3.9'

services:
  # Hive Metastore Database
  postgres_metastore_hive:
    image: postgres:13
    restart: unless-stopped
    container_name: postgres_metastore
    hostname: postgres
    environment:
      POSTGRES_DB: 'metastore_db'
      POSTGRES_USER: 'hive'
      POSTGRES_PASSWORD: 'password'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hive -d metastore_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - '5438:5432'
    volumes:
      - hive-db:/var/lib/postgresql/data
    networks:
      - data_network

  # Hive Metastore
  metastore:
    image: apache/hive:4.0.1
    depends_on:
      postgres_metastore_hive:
        condition: service_healthy
    restart: unless-stopped
    container_name: metastore
    hostname: metastore
    environment:
      DB_DRIVER: postgres
      SERVICE_NAME: 'metastore'
      SERVICE_OPTS: >
        -Xmx1G
        -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
        -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres:5432/metastore_db
        -Djavax.jdo.option.ConnectionUserName=hive
        -Djavax.jdo.option.ConnectionPassword=password
        -Ddatanucleus.autoCreateSchema=true
        -Dhive.metastore.schema.verification=false
        -Dhive.metastore.schema.verification.record.version=false
    ports:
      - '9083:9083'
    volumes:
      - warehouse:/opt/hive/data/warehouse
      - ./postgresql-42.6.0.jar:/opt/hive/lib/postgresql-42.6.0.jar
    networks:
      - data_network

  # Hadoop NameNode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    restart: unless-stopped
    ports:
      - "9870:9870"
      - "9000:9000"
    environment:
      - CLUSTER_NAME=hadoop-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    healthcheck:
      test: ["CMD", "curl", "-f", "http://namenode:9870"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - data_network

  # Hadoop DataNode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    hostname: datanode
    restart: unless-stopped
    depends_on:
      - namenode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    networks:
      - data_network

  # PostgreSQL for Airflow (serves as both metadata DB and results backend)
  postgres_airflow:
    image: postgres:13
    container_name: postgres_airflow
    hostname: postgres_airflow
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5439:5432"
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    networks:
      - data_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  # Airflow init container to set up directories with correct permissions
  airflow-init:
    image: apache/airflow:2.7.1
    container_name: airflow-init
    depends_on:
      - postgres_airflow
    entrypoint: /bin/bash
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/airflow_files:/opt/airflow/files
    command: >
      -c "
      mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins /opt/airflow/files;
      chmod -R 777 /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins /opt/airflow/files;
      airflow db init;
      airflow users create --username airflow --password airflow --firstname Admin --lastname User --role Admin --email admin@example.com;
      "
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      - AIRFLOW__CORE__FERNET_KEY=''
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
    networks:
      - data_network

  # Airflow webserver and scheduler
  airflow:
    image: apache/airflow:2.7.1
    container_name: airflow
    hostname: airflow
    restart: unless-stopped
    depends_on:
      - postgres_airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      - AIRFLOW__CORE__FERNET_KEY=''
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
    user: "root"  # Use root user to avoid permission issues
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./airflow_files:/opt/airflow/files
    ports:
      - "8080:8080"
    # Initialize directories and start services
    command: >
      bash -c "mkdir -p /opt/airflow/logs/scheduler /opt/airflow/logs/dag_processor_manager &&
               chmod -R 777 /opt/airflow/logs &&
               airflow db init &&
               airflow users create --username airflow --password airflow --firstname Admin --lastname User --role Admin --email admin@example.com &&
               airflow scheduler & airflow webserver"
    networks:
      - data_network
volumes:
  hive-db:
  warehouse:
  hadoop_namenode:
  hadoop_datanode:
  postgres_airflow_data:

networks:
  data_network:
    driver: bridge